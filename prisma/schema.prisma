generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model PostTags {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  posts     Posts[]

  @@map("posttags")
}

model PostContent {
  id        Int     @id @default(autoincrement())
  content   String  @db.Text
  type      String  @db.Text
  size      Float?
  order     Int     @default(0)
  reference String?
  PostsId   Int
  Posts     Posts   @relation(fields: [PostsId], references: [id], onDelete: Cascade)

  @@map("postcontent")
}

model Posts {
  id          Int           @id @default(autoincrement())
  uuid        String        @unique @default(uuid())
  image       String?       @db.Text
  name        String        @db.VarChar(255)
  slug        String        @db.VarChar(255)
  description String        @db.VarChar(100)
  finished    Boolean       @default(false)
  isFixed     Boolean       @default(false)
  author      String
  adminId     Int
  createdAt   DateTime      @default(now())
  postTagsId  Int
  postTags    PostTags      @relation(fields: [postTagsId], references: [id], onDelete: Cascade)
  users       Admins        @relation(fields: [adminId], references: [id], onDelete: Cascade)
  PostContent PostContent[]

  @@map("posts")
}

model Admins {
  id        Int      @id @default(autoincrement())
  image     String?  @db.Text()
  name      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  posts     Posts[]

  @@map("admins")
}
