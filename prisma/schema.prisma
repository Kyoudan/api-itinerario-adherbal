generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FeaturedPosts {
  id     Int   @id @default(autoincrement())
  PostId Int
  Post   Posts @relation(fields: [PostId], references: [id], onDelete: Cascade)
}

model ActivateAccounts {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  userId    Int
  users     Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activateaccounts")
}

model PostTags {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  posts     Posts[]

  @@map("posttags")
}

model PostContent {
  id      Int    @id @default(autoincrement())
  content String @db.Text
  type    String @db.Text
  size    Float?
  order   Int    @default(0)
  PostsId Int
  Posts   Posts  @relation(fields: [PostsId], references: [id], onDelete: Cascade)

  @@map("postcontent")
}

model Posts {
  id            Int             @id @default(autoincrement())
  uuid          String          @unique @default(uuid())
  image         String?         @db.Text
  name          String          @db.VarChar(255)
  description   String          @db.VarChar(100)
  color         String          @db.VarChar(255)
  finished      Boolean         @default(false)
  author        String
  adminId       Int
  createdAt     DateTime        @default(now())
  postTagsId    Int
  postTags      PostTags        @relation(fields: [postTagsId], references: [id], onDelete: Cascade)
  users         Admins          @relation(fields: [adminId], references: [id], onDelete: Cascade)
  PostContent   PostContent[]
  FeaturedPosts FeaturedPosts[]

  @@map("posts")
}

model RecoverPasswords {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  userId    Int?
  users     Users?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  adminId   Int?
  Admin     Admins?  @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("recoverpasswords")
}

model Users {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  description      String?            @db.VarChar(255)
  email            String             @unique @db.VarChar(255)
  password         String             @db.VarChar(255)
  activated        Boolean            @default(false)
  createdAt        DateTime           @default(now())
  activateAccounts ActivateAccounts[]
  recoverPasswords RecoverPasswords[]

  @@map("users")
}

model Admins {
  id               Int                @id @default(autoincrement())
  image            String?            @db.Text()
  name             String             @db.VarChar(255)
  email            String             @unique @db.VarChar(255)
  password         String             @db.VarChar(255)
  createdAt        DateTime           @default(now())
  posts            Posts[]
  recoverPasswords RecoverPasswords[]

  @@map("admins")
}
