generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ActivateAccounts {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  userId    Int
  users     Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activateaccounts")
}

model PostTags {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  posts     Posts[]

  @@map("posttags")
}

model PostContentType {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  createdAt   DateTime      @default(now())
  PostContent PostContent[]

  @@map("postcontenttype")
}

model PostContent {
  id                Int             @id @default(autoincrement())
  content           String          @db.Text
  PostContentTypeId Int
  PostContentType   PostContentType @relation(fields: [PostContentTypeId], references: [id], onDelete: Cascade)
  PostsId           Int
  Posts             Posts           @relation(fields: [PostsId], references: [id], onDelete: Cascade)

  @@map("postcontent")
}

model Posts {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  description String        @db.VarChar(60)
  slug        String        @unique @db.VarChar(255)
  color       String        @db.VarChar(255)
  finished    Boolean       @default(false)
  userId      Int
  createdAt   DateTime      @default(now())
  postTagsId  Int
  postTags    PostTags      @relation(fields: [postTagsId], references: [id], onDelete: Cascade)
  users       Users         @relation(fields: [userId], references: [id], onDelete: Cascade)
  PostContent PostContent[]

  @@map("posts")
}

model RecoverPasswords {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  userId    Int
  users     Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recoverpasswords")
}

model Users {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  description      String?            @db.VarChar(255)
  email            String             @unique @db.VarChar(255)
  password         String             @db.VarChar(255)
  activated        Boolean            @default(false)
  createdAt        DateTime           @default(now())
  activateAccounts ActivateAccounts[]
  posts            Posts[]
  recoverPasswords RecoverPasswords[]

  @@map("users")
}
